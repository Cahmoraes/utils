{"version":3,"sources":["../src/utils/path.ts","../src/utils/log.ts","../src/utils/pipe.ts","../src/utils/createPipe.ts","../src/utils/asyncPipe.ts","../src/utils/createAsyncPipe.ts","../src/utils/memo.ts","../src/utils/partialize.ts","../src/utils/typeOf.ts","../src/utils/isPrimitive.ts","../src/utils/curry.ts","../src/utils/debounce.ts","../src/utils/takeUntil.ts","../src/utils/deepFreeze.ts","../src/utils/mixin.ts","../src/utils/checkInterface.ts"],"names":["path","module","pathString","firstPath","paths","fullPath","log","args","pipe","value","operations","acc","fn","createPipe","asyncPipe","createAsyncPipe","memo","cache","memoizedFn","key","result","partialize","typeOf","elementToCheck","stringType","isPrimitive","element","curry","curried","args2","debounce","milliseconds","timer","takeUntil","until","deepFreeze","data","isMap","isSet","freezeMapOrSet","entries","errors","mapOrSet","freezeMap","freezeSet","die","map","set","isObject","mixin","target","objects","object","cloneObj","obj","descriptor","checkInterface","anObj","keys"],"mappings":"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","sourcesContent":["/**\n * Resolve internal Objects and Arrays paths. Return null when path not exists.\n * @date 08/10/2022 - 16:32:10\n *\n * @param {unknown} module - Object or Array\n * @param {string} pathString Path to property: 'addresses.0.street'\n * @returns {(T | null)} Existing property or null if none\n */\nexport const path = <T>(module: unknown, pathString: string): T | null => {\n  if (!module) return null\n\n  const [firstPath, ...paths] = pathString.split('.')\n  let fullPath = (module as any)[firstPath]\n\n  for (const path of paths) {\n    if (!fullPath) return null\n    fullPath = fullPath[path]\n  }\n\n  return fullPath as T\n}\n","/**\n * Log values\n * @date 08/10/2022 - 16:27:16\n *\n * @param {...unknown[]} args Parameters to log\n */\nexport const log = (...args: unknown[]) => console.log(...args)\n","/**\n * Apply pipeline to a value\n * @date 18/10/2022 - 10:23:41\n *\n * @param {A} value Value that will transformed by pipeline\n * @param {...operations[]} operations Function or functions to pipeline\n * @returns Value transformed by pipeline\n */\n\nexport function pipe<A, B>(value: A, op1: (input: A) => B): B\n\nexport function pipe<A, B, C>(\n  value: A,\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n): C\n\nexport function pipe<A, B, C, D>(\n  value: A,\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n): D\n\nexport function pipe<A, B, C, D, E>(\n  value: A,\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n  op4: (input: D) => E,\n): E\n\nexport function pipe<A, B, C, D, E, F>(\n  value: A,\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n  op4: (input: D) => E,\n  op5: (input: E) => F,\n): F\n\nexport function pipe<A, B, C, D, E, F, G>(\n  value: A,\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n  op4: (input: D) => E,\n  op5: (input: E) => F,\n  op6: (input: F) => G,\n): G\n\nexport function pipe<A, B, C, D, E, F, G, H>(\n  value: A,\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n  op4: (input: D) => E,\n  op5: (input: E) => F,\n  op6: (input: F) => G,\n  op7: (input: G) => H,\n): H\n\nexport function pipe<A, B, C, D, E, F, G, H, I>(\n  value: A,\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n  op4: (input: D) => E,\n  op5: (input: E) => F,\n  op6: (input: F) => G,\n  op7: (input: G) => H,\n  op8: (input: H) => I,\n): I\n\nexport function pipe<A, B, C, D, E, F, G, H, I, J>(\n  value: A,\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n  op4: (input: D) => E,\n  op5: (input: E) => F,\n  op6: (input: F) => G,\n  op7: (input: G) => H,\n  op8: (input: H) => I,\n  op9: (input: I) => J,\n): J\n\nexport function pipe<A, B, C, D, E, F, G, H, I, J, K>(\n  value: A,\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n  op4: (input: D) => E,\n  op5: (input: E) => F,\n  op6: (input: F) => G,\n  op7: (input: G) => H,\n  op8: (input: H) => I,\n  op9: (input: I) => J,\n  op10: (input: J) => K,\n): K\n\nexport function pipe(\n  value: any,\n  ...operations: readonly ((input: any) => any)[]\n) {\n  return operations.reduce((acc, fn) => fn(acc), value)\n}\n","/**\n * Apply pipeline to a value\n * @date 08/10/2022 - 16:35:18\n *\n * @param {...operations[]} operations Function or functions to pipeline\n * @returns {<T>(value: any) => any} Function with value to transform\n */\n\nimport { pipe } from './pipe'\n\nexport function createPipe<A, B>(op1: (input: A) => B): (value: A) => B\n\nexport function createPipe<A, B, C>(\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n): (value: A) => C\n\nexport function createPipe<A, B, C, D>(\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n): (value: A) => D\n\nexport function createPipe<A, B, C, D, E>(\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n  op4: (input: D) => E,\n): (value: A) => E\n\nexport function createPipe<A, B, C, D, E, F>(\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n  op4: (input: D) => E,\n  op5: (input: E) => F,\n): (value: A) => F\n\nexport function createPipe<A, B, C, D, E, F, G>(\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n  op4: (input: D) => E,\n  op5: (input: E) => F,\n  op6: (input: F) => G,\n): (value: A) => G\n\nexport function createPipe<A, B, C, D, E, F, G, H>(\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n  op4: (input: D) => E,\n  op5: (input: E) => F,\n  op6: (input: F) => G,\n  op7: (input: G) => H,\n): (value: A) => H\n\nexport function createPipe<A, B, C, D, E, F, G, H, I>(\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n  op4: (input: D) => E,\n  op5: (input: E) => F,\n  op6: (input: F) => G,\n  op7: (input: G) => H,\n  op8: (input: H) => I,\n): (value: A) => I\n\nexport function createPipe<A, B, C, D, E, F, G, H, I, J>(\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n  op4: (input: D) => E,\n  op5: (input: E) => F,\n  op6: (input: F) => G,\n  op7: (input: G) => H,\n  op8: (input: H) => I,\n  op9: (input: I) => J,\n): (value: A) => J\n\nexport function createPipe<A, B, C, D, E, F, G, H, I, J, K>(\n  op1: (input: A) => B,\n  op2: (input: B) => C,\n  op3: (input: C) => D,\n  op4: (input: D) => E,\n  op5: (input: E) => F,\n  op6: (input: F) => G,\n  op7: (input: G) => H,\n  op8: (input: H) => I,\n  op9: (input: I) => J,\n  op10: (input: J) => K,\n): (value: A) => K\n\nexport function createPipe(...operations: ((input: any) => any)[]) {\n  return (value: any) => (pipe as any)(value, ...operations)\n}\n","/**\n * Apply async pipeline to a value\n * @date 18/10/2022 - 10:23:41\n *\n * @param {A} value Value that will transformed by pipeline\n * @param {...operations[]} operations Function or functions to pipeline\n * @returns Value transformed by asyncPipeline\n */\n\nexport function asyncPipe<A, B>(value: Promise<A> | A, op1: (input: A) => B): B\n\nexport function asyncPipe<A, B, C>(\n  value: Promise<A> | A,\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n): Promise<C>\n\nexport function asyncPipe<A, B, C, D>(\n  value: Promise<A> | A,\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n): Promise<D>\n\nexport function asyncPipe<A, B, C, D, E>(\n  value: Promise<A> | A,\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n  op4: (input: D) => Promise<E>,\n): Promise<E>\n\nexport function asyncPipe<A, B, C, D, E, F>(\n  value: Promise<A> | A,\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n  op4: (input: D) => Promise<E>,\n  op5: (input: E) => Promise<F>,\n): Promise<F>\n\nexport function asyncPipe<A, B, C, D, E, F, G>(\n  value: Promise<A> | A,\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n  op4: (input: D) => E,\n  op5: (input: E) => Promise<F>,\n  op6: (input: F) => Promise<G>,\n): Promise<G>\n\nexport function asyncPipe<A, B, C, D, E, F, G, H>(\n  value: Promise<A> | A,\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n  op4: (input: D) => Promise<E>,\n  op5: (input: E) => Promise<F>,\n  op6: (input: F) => Promise<G>,\n  op7: (input: G) => Promise<H>,\n): Promise<H>\n\nexport function asyncPipe<A, B, C, D, E, F, G, H, I>(\n  value: Promise<A> | A,\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n  op4: (input: D) => Promise<E>,\n  op5: (input: E) => Promise<F>,\n  op6: (input: F) => Promise<G>,\n  op7: (input: G) => Promise<H>,\n  op8: (input: H) => Promise<I>,\n): Promise<I>\n\nexport function asyncPipe<A, B, C, D, E, F, G, H, I, J>(\n  value: Promise<A> | A,\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n  op4: (input: D) => Promise<E>,\n  op5: (input: E) => Promise<F>,\n  op6: (input: F) => Promise<G>,\n  op7: (input: G) => Promise<H>,\n  op8: (input: H) => Promise<I>,\n  op9: (input: I) => Promise<J>,\n): Promise<J>\n\nexport function asyncPipe<A, B, C, D, E, F, G, H, I, J, K>(\n  value: Promise<A> | A,\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n  op4: (input: D) => Promise<E>,\n  op5: (input: E) => Promise<F>,\n  op6: (input: F) => Promise<G>,\n  op7: (input: G) => Promise<H>,\n  op8: (input: H) => Promise<I>,\n  op9: (input: I) => Promise<J>,\n  op10: (input: J) => Promise<K>,\n): Promise<K>\n\nexport function asyncPipe(\n  value: any | Promise<any>,\n  ...operations: readonly ((input: any) => any)[]\n) {\n  return operations.reduce(async (acc, fn) => {\n    if (Promise.resolve(acc) === acc) {\n      return fn(await acc)\n    }\n    return fn(acc as Awaited<Promise<any>>)\n  }, value)\n}\n","/**\n * Create Apply async pipeline to a value\n * @date 08/10/2022 - 16:36:26\n *\n * @template K\n * @param {...Callback<K>[]} fns Function or functions to pipeline\n * @returns {(value: any) => any} Function with value to transform\n */\n\nimport { asyncPipe } from './asyncPipe'\n\nexport function createAsyncPipe<A, B>(\n  op1: (input: A) => B,\n): (value: Promise<A> | A) => B\n\nexport function createAsyncPipe<A, B, C>(\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n): (value: Promise<A> | A) => Promise<C>\n\nexport function createAsyncPipe<A, B, C, D>(\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n): (value: Promise<A> | A) => Promise<D>\n\nexport function createAsyncPipe<A, B, C, D, E>(\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n  op4: (input: D) => Promise<E>,\n): (value: Promise<A> | A) => Promise<E>\n\nexport function createAsyncPipe<A, B, C, D, E, F>(\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n  op4: (input: D) => Promise<E>,\n  op5: (input: E) => Promise<F>,\n): (value: Promise<A> | A) => Promise<F>\n\nexport function createAsyncPipe<A, B, C, D, E, F, G>(\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n  op4: (input: D) => E,\n  op5: (input: E) => Promise<F>,\n  op6: (input: F) => Promise<G>,\n): (value: Promise<A> | A) => Promise<G>\n\nexport function createAsyncPipe<A, B, C, D, E, F, G, H>(\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n  op4: (input: D) => Promise<E>,\n  op5: (input: E) => Promise<F>,\n  op6: (input: F) => Promise<G>,\n  op7: (input: G) => Promise<H>,\n): (value: Promise<A> | A) => Promise<H>\n\nexport function createAsyncPipe<A, B, C, D, E, F, G, H, I>(\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n  op4: (input: D) => Promise<E>,\n  op5: (input: E) => Promise<F>,\n  op6: (input: F) => Promise<G>,\n  op7: (input: G) => Promise<H>,\n  op8: (input: H) => Promise<I>,\n): (value: Promise<A> | A) => Promise<I>\n\nexport function createAsyncPipe<A, B, C, D, E, F, G, H, I, J>(\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n  op4: (input: D) => Promise<E>,\n  op5: (input: E) => Promise<F>,\n  op6: (input: F) => Promise<G>,\n  op7: (input: G) => Promise<H>,\n  op8: (input: H) => Promise<I>,\n  op9: (input: I) => Promise<J>,\n): (value: Promise<A> | A) => Promise<J>\n\nexport function createAsyncPipe<A, B, C, D, E, F, G, H, I, J, K>(\n  op1: (input: A) => Promise<B>,\n  op2: (input: B) => Promise<C>,\n  op3: (input: C) => Promise<D>,\n  op4: (input: D) => Promise<E>,\n  op5: (input: E) => Promise<F>,\n  op6: (input: F) => Promise<G>,\n  op7: (input: G) => Promise<H>,\n  op8: (input: H) => Promise<I>,\n  op9: (input: I) => Promise<J>,\n  op10: (input: J) => Promise<K>,\n): (value: Promise<A> | A) => Promise<K>\n\nexport function createAsyncPipe(\n  ...operations: readonly ((input: any) => any)[]\n) {\n  return (value: any | Promise<any>) => (asyncPipe as any)(value, ...operations)\n}\n","type MemoizedFn<T> = T & {\n  clear: () => void\n}\n\ntype Callback<K> = (...args: K[]) => K\n\n/**\n * Apply patterns memoization to a function\n * @date 08/10/2022 - 16:29:04\n *\n * @param {K} fn Function to apply memoization\n * @returns {MemoizedFn<ReturnType<Callback<K>>>} Memoized function\n */\nexport const memo = <K>(fn: K): MemoizedFn<ReturnType<Callback<K>>> => {\n  const cache = new Map<string, ReturnType<Callback<K>>>()\n\n  const memoizedFn = (...args: unknown[]): ReturnType<Callback<K>> => {\n    const key = JSON.stringify(args)\n\n    if (cache.has(key)) {\n      return cache.get(key) as ReturnType<Callback<K>>\n    }\n\n    const result = (fn as CallableFunction)(...args)\n    cache.set(key, result)\n\n    return result\n  }\n\n  Reflect.defineProperty(memoizedFn, 'clear', {\n    value: () => cache.clear(),\n  })\n\n  return memoizedFn as any\n}\n","type PartialFunction<T> = (...args: any[]) => T\n\n/**\n * Apply pattern Partial Application\n * @date 08/10/2022 - 16:30:22\n *\n * @param {PartialFunction<T>} fn Function to apply partial application\n * @param {...any[]} args args to apply in the Partial Function\n * @returns {PartialFunction<T>} Partial Function\n */\nexport const partialize = <T>(\n  fn: PartialFunction<T>,\n  ...args: any[]\n): PartialFunction<T> => fn.bind(null, ...args)\n","/**\n * Return a representational string of a given data type\n * @date 08/10/2022 - 17:20:28\n *\n * @param {unknown} elementToCheck Element to check type\n * @returns {String} type of element\n */\nexport const typeOf = (elementToCheck: unknown) => {\n  const stringType = Reflect.apply(\n    Object.prototype.toString,\n    elementToCheck,\n    [],\n  )\n  return stringType\n    .substring(stringType.indexOf(' ') + 1, stringType.indexOf(']'))\n    .toLowerCase()\n}\n","/**\n * Check if element is a primitive type\n * @date 04/10/2022 - 21:10:18\n *\n * @param {unknown} element Element to check\n * @returns {boolean} True => primitive | False => not primitive\n */\nexport const isPrimitive = (element: unknown) => !(Object(element) === element)\n","type Curry = <R extends (...args: any) => any>(fn: R) => Curried<ReturnType<R>>\n\n// type Curried<R> = (...args: any) => R | Curried<R>\ntype Curried<R> = (...args: any) => Curried2<R>\n\ntype Curried2<R> = R extends (...args: any) => any ? never : Curried<R>\n\nexport const curry: Curry = (fn) => {\n  return function curried(...args: any) {\n    if (fn.length <= args.length) {\n      return Reflect.apply(fn, null, args)\n    } else {\n      return (...args2: any) => {\n        return Reflect.apply(curried, null, args.concat(args2))\n      }\n    }\n  }\n}\n","type Func<TS extends any[], R> = (...args: TS) => R\n\n/**\n * This function implements debounce pattern\n * @date 11/10/2022 - 14:40:38\n *\n * @param {Func<any[], any>} fn Function to apply debounce\n * @param {number} [milliseconds=200] Time in milliseconds to schedule a function call\n * @returns {(...args: {}) => void} Function with debounce pattern\n */\nexport const debounce = (fn: Func<any[], any>, milliseconds = 200) => {\n  let timer: any = 0\n\n  return (...args: unknown[]) => {\n    if (timer) clearTimeout(timer)\n    timer = setTimeout(() => {\n      Reflect.apply(fn, null, args)\n      timer = null\n    }, milliseconds)\n  }\n}\n","type Func<T> = (...args: any[]) => T\n\n/**\n * Create a function that can be called a certain number of times. If the number of calls is greater than the configured number of times, the undefined value will be returned.\n * @date 11/10/2022 - 14:42:51\n *\n * @template T\n * @param {Func<T>} fn Function that will be called\n * @param {*} [until=Infinity] Quantity of numbers that function can be called\n * @returns {(...args: {}) => Func<T>} Configured Function with takeUntil\n */\nexport const takeUntil =\n  <T>(fn: Func<T>, until = Infinity) =>\n  (...args: unknown[]): Func<T> | undefined =>\n    until-- > 0 ? (Reflect.apply(fn, null, args) as Func<T>) : undefined\n","import { isPrimitive } from './isPrimitive'\n\n/**\n * freeze recursively arrays and object structures\n * @date 11/10/2022 - 14:39:31\n *\n * @param {T} data Array or Object Structure\n * @returns {Readonly<T>} freezed data\n */\nexport const deepFreeze = <T extends object>(data: T): Readonly<T> => {\n  if (!isPrimitive(data)) {\n    if (isMap(data) || isSet(data)) {\n      freezeMapOrSet(data)\n      entries(data)\n    } else {\n      Reflect.ownKeys(data).forEach((key) => deepFreeze((data as any)[key]))\n    }\n  }\n\n  return Object.freeze(data)\n}\n\nconst errors = new Map([\n  [1, 'This object has been frozen and should not be mutated'],\n])\n\nconst isMap = (element: unknown): element is Map<unknown, unknown> =>\n  element instanceof Map\n\nconst isSet = (element: unknown): element is Set<unknown> =>\n  element instanceof Set\n\nconst entries = (data: Map<unknown, unknown> | Set<unknown>) =>\n  data.forEach((value: any) => deepFreeze(value))\n\nconst freezeMapOrSet = (mapOrSet: Map<unknown, unknown> | Set<unknown>) => {\n  if (isMap(mapOrSet)) {\n    freezeMap(mapOrSet)\n  } else {\n    freezeSet(mapOrSet)\n  }\n}\n\nconst die = () => {\n  throw Error(errors.get(1))\n}\n\nconst freezeMap = (map: Map<unknown, unknown>) => {\n  map.set = die\n  map.delete = die\n  map.clear = die\n}\n\nconst freezeSet = (set: Set<unknown>) => {\n  set.add = die\n  set.delete = die\n  set.clear = die\n}\n","import { typeOf } from './typeOf'\n\nfunction isObject(element: unknown): asserts element is object {\n  if (typeOf(element) !== 'object') {\n    throw new TypeError(`[${element}] should be an object`)\n  }\n}\n\nexport const mixin = <TResult = any>(\n  target: any,\n  ...objects: any[]\n): TResult => {\n  ;[target, ...objects].forEach(isObject)\n  objects.forEach((object) => cloneObj(target, object))\n  return target as TResult\n}\n\nconst cloneObj = (target: any, obj: any) => {\n  Reflect.ownKeys(obj).forEach((key) => {\n    if (typeof obj[key] === 'object') {\n      target[key] = {}\n      cloneObj(target[key], obj[key])\n    } else {\n      const descriptor = Object.getOwnPropertyDescriptor(obj, key)\n      if (descriptor) Reflect.defineProperty(target, key, descriptor)\n    }\n  })\n}\n","/**\n * Check if object is type of Interface in Type Parameter\n * @date 16/11/2022 - 19:20:18\n *\n * @export\n * @template Interface - Interface to check\n * @param {unknown} anObj - Object to check\n * @param {...(keyof Interface)[]} keys - keys of interface to check in object\n * @returns {anObj is Interface}\n */\nexport function checkInterface<Interface>(\n  anObj: unknown,\n  ...keys: (keyof Interface)[]\n): anObj is Interface {\n  if (anObj && typeof anObj === 'object' && keys.every((key) => key in anObj)) {\n    return true\n  }\n  return false\n}\n"]}